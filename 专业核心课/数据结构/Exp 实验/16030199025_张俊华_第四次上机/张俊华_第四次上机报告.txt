







实习报告：5.4 教学编制演示
学院：计算机学院                班级：1603019
学号：16030199025				     姓名：张俊华
题目：设计一个教学计划编制程序。














一.需求分析
1. 初始化：从文件读入课程依赖信息，读取课程学分信息 
2. 图的生成：按照读取内容添加课程为节点，依赖信息为边 
3. 生产编排策略：用户输入参数，按需求生成拓扑序列，输出教学计划
4. 测试数据为：
1,程序设计基础
2,离散数学,1
3,数据结构,1,2
4,汇编语言,1
5,语言的设计与分析,3,4
6,计算机原理,11
7,编译原理,5,3
8,操作系统,3,6
9,高等数学
10,线性代数,9
11,普通物理,9
12,数值分析,9,10,15. 



程序执行的命令为：
1）初始化                
2）生成课程拓扑序列
3）按需求生成教学计划

二.概要设计
1.	为实现上述程序功能，使用有向图储存课程信息
设定图的抽象数据类型定义：
ADT map{
		数据对象：D = { ai|ai ∈map,i=1,2,…,n,n≥0 }
		数据关系：R1 = {<ai-1,ai> | ai-1,ai ∈ D,i=2,…,n}
					R2 = {<ai-1,ai> | ai-1,ai ∈ D,i=2,…,n}

		基本操作：
		

/**
 * 初始化邻接表图
 * @param graph
 * @param vexNum
 */
void initALGraph(ALGraph graph,int vexNum)

/**
 * 添加边
 * @param graph
 * @param startNodePosition
 * @param endNodePosition
 * @param info
 */
void addArcToALGraph(ALGraph graph,int startNodePosition, int endNodePosition,InfoType *info)

/**
 * 添加头结点
 * @param graph
 * @param nodeData
 */
void addVNode(ALGraph graph,VertexType nodeData)

3.	本程序包含以下模块
1）	主程序模块
2）	有向邻接表模块——实现抽象图数据类型
3） 课程信息模块——实现课程信息储存
4）	功能模块——拓展功能，实现拓扑序列输出

 
三、 详细设计


1. 图储存结构设计
typedef struct ArcNode{ //弧
    int adjvex;   //弧所指向的头下标
    struct ArcNode *nestArc = NULL;   //下一条弧
    InfoType *info;   //弧信息
}ArcNode;

typedef struct VNode{  //头结点
    VertexType* data  = NULL;
    ArcNode *firstArc = NULL;  //第一条弧指针
    int num;
    int credit;

    bool searched = false;
}VNode,* AdjList;

typedef struct ALGraphHead{
    AdjList vertices;   //头节点表
    int vexNum,arcNum;  //顶点数、弧数
}*ALGraph;

typedef struct Arc{
    string startNode;
    string endNode;
}Arc;

stack<VNode> learningStack;
/**
 * 初始化邻接表图
 * @param graph
 * @param vexNum
 */
void initALGraph(ALGraph graph,int vexNum){
    graph->vertices = (AdjList)malloc(sizeof(VNode)*vexNum);
    graph->vexNum = 1;
    graph->arcNum = 0;
}

/**
 * 添加边
 * @param graph
 * @param startNodePosition
 * @param endNodePosition
 * @param info
 */
void addArcToALGraph(ALGraph graph,int startNodePosition, int endNodePosition,InfoType *info){
    ArcNode * arcNodePoint = graph->vertices[startNodePosition].firstArc;
    while (arcNodePoint&&arcNodePoint->nestArc!=NULL){
        arcNodePoint = arcNodePoint->nestArc;
    }
    ArcNode * newArcNode = new ArcNode;
    newArcNode->adjvex = endNodePosition;
    newArcNode->info = info;
    if (!arcNodePoint){
        graph->vertices[startNodePosition].firstArc = newArcNode;
    }else{
        arcNodePoint->nestArc = newArcNode;
    }



    graph->arcNum++;
}

/**
 * 添加头结点
 * @param graph
 * @param nodeData
 */
void addVNode(ALGraph graph,VertexType nodeData){
    string *data = new string(nodeData);
    graph->vertices[graph->vexNum].num = graph->vexNum;
    graph->vertices[graph->vexNum].data = data;
    graph->vertices[graph->vexNum].firstArc = NULL;
    graph->vexNum++;
}

int findVnode(ALGraph graph,VertexType nodeData){
    for (int i = 1; i < graph->vexNum; ++i) {
        if(*(graph->vertices[i].data) == nodeData){
            return i;
        }
    }
    return -1;
}
2. 初始化功能模块
void initialize(ALGraph graph){

    initALGraph(graph,100);
    FILE *fin = fopen("subjectGraph.csv","r");
    if (!fin)   printf("Can't open file \"subjectGraph.csv\", please check");
    else{
        puts(">>检测到教学计划文件：subjectGraph.csv 使用该文件进行配置");
        int number;
        char*  subjectName;
        subjectName = (char *)malloc(sizeof(char)*20);
        while (fscanf(fin,"%d,%[^,||\r\n]",&number,subjectName)!=EOF){
            string name = subjectName;
                addVNode(graph,subjectName);
            char ch;
            while ((ch = fgetc(fin))!='\r'&&ch!=EOF){
                int preNum;
                fscanf(fin,"%d",&preNum);
                addArcToALGraph(graph,preNum,number,NULL);
            }
            subjectName = (char *)malloc(sizeof(char)*20);
        };
    }
    cout<<"\033[32;1m>>教学计划成功导入，本次共导入了"<<graph->vexNum-1<<"个科目，"<<graph->arcNum<<"条依赖规则\033[0m"<<endl;
    fclose(fin);
    fin = fopen("subjectCredit.csv","r");
    if (!fin)   printf("Can't open file \"subjectCredit.csv\", please check");
    else{
        puts(">>检测到学分文件：subjectCredit.csv 使用该文件进行配置");
        int credit;
        char*  subjectName;
        int n = 0;
        subjectName = (char *)malloc(sizeof(char)*20);
        while (fscanf(fin,"%[^,],%d\r\n",subjectName,&credit)!=EOF) {
            string name = subjectName;
            graph->vertices[findVnode(graph,name)].credit = credit;
            n++;
        }
        cout<<"\033[32;1m>>学分数据导入完毕，共导入"<<n<<"个科目的学分\033[0m"<<endl;
    }
}
3.	核心功能模块
int DFSGraph(ALGraph graph,int startNodePosition){
    if (graph->vertices[startNodePosition].searched)
        return -1;
    //cout<<*(graph->vertices[startNodePosition].data)<<endl;
    graph->vertices[startNodePosition].searched = true;

    ArcNode * arcNode = graph->vertices[startNodePosition].firstArc;

    while (arcNode){
        if(!graph->vertices[arcNode->adjvex].searched){
            DFSGraph(graph,arcNode->adjvex);
        }
        arcNode = arcNode->nestArc;
    }
    //cout<<*(graph->vertices[startNodePosition].data)<<",\t";
    learningStack.push(graph->vertices[startNodePosition]);
}

void printTimeTable(ALGraph graph){
    puts(">>请输入学期总数：");
    cout<<">>";
    int maxSemesterNum;
    cin>>maxSemesterNum;
    puts(">>请输入每学期学分上限：");
    cout<<">>";
    int maxCreditPerSemester;
    cin>>maxCreditPerSemester;
    puts(">>均衡排课？：");
    cout<<">>";
    setbuf(stdin,NULL);
    setbuf(stdout,NULL);
    bool balanced = false;
    if (getchar()=='y'){
        balanced = true;
    }

    int creditCurrent = 0;
    stack<VNode> tempLearningStack = learningStack;
    int semesterNum = 1;

    if(balanced){
        int totalSubjectNum = 0;
        while (!tempLearningStack.empty()){
            totalSubjectNum++;
            tempLearningStack.pop();
        }
        totalSubjectNum=totalSubjectNum/maxSemesterNum+1;
        tempLearningStack = learningStack;
        printf("第%d学期\n",semesterNum++);
        printf("编号\t\t课程名\t\t学分\n");
        while (!tempLearningStack.empty()){
            creditCurrent+=1;
            if (creditCurrent<totalSubjectNum){
                printf("%d\t\t%s\t\t%d\n",tempLearningStack.top().num,tempLearningStack.top().data->c_str(),tempLearningStack.top().credit);
                tempLearningStack.pop();
            } else{
                if (semesterNum>maxSemesterNum){
                    cout<<"[error]学期数不足！"<<endl;
                    break;
                } else{
                    printf("第%d学期\n",semesterNum++);
                    printf("编号\t\t课程名\t\t学分\n");
                    creditCurrent = 0;
                }
            }
        }
    } else{
        tempLearningStack = learningStack;
        printf("第%d学期\n",semesterNum++);
        while (!tempLearningStack.empty()){
            creditCurrent+=tempLearningStack.top().credit;
            if (creditCurrent<maxCreditPerSemester){
                printf("%d\t\t%s\t\t%d\n",tempLearningStack.top().num,tempLearningStack.top().data->c_str(),tempLearningStack.top().credit);
                tempLearningStack.pop();
            } else{
                if (semesterNum>maxSemesterNum){
                    cout<<"[error]学期数不足！"<<endl;
                    break;
                } else{
                    printf("第%d学期\n",semesterNum++);
                    creditCurrent = 0;
                }
            }
        }
    }

}

void menu(ALGraph graph){
    for (int j = 1; j < graph->vexNum; ++j) {
        DFSGraph(graph,j);
    }

    char c;

    puts("[options]\tfunction");
    puts("[v]\t查看当前课程信息");
    puts("[j]\t生成可行学习路径");
    puts("[t]\t自定义生成课表");
    puts("[q]\t退出");
    stack<VNode> tempLearningStack = learningStack;
    while ((c = getchar())!='q'){

        switch (c){
            case 'v':
                printf("编号\t\t课程名\t\t学分\n");
                for (int i = 1; i < graph->vexNum; ++i) {
                    cout<<"\t"<<i<<"\t"<<*(graph->vertices[i].data)<<"\t"<<graph->vertices[i].credit<<endl;
                }
                break;
            case 'j':
                tempLearningStack = learningStack;
                for (int j = 1; j < graph->vexNum; ++j) {
                    DFSGraph(graph,j);
                    while (!tempLearningStack.empty()){
                        cout<<*(tempLearningStack.top().data)<<"->";
                        tempLearningStack.pop();
                    }
                }
                break;
            case 't':
                printTimeTable(graph);
                break;
        }
        system("read -p \"请按任意键继续...\"");
        puts("[options]\tfunction");
        puts("[v]\t查看当前课程信息");
        puts("[j]\t生成可行学习路径");
        puts("[t]\t自定义生成课表");
        puts("[q]\t退出");
        setbuf(stdin,NULL);
        puts("\n\n\n");
        setbuf(stdout,NULL);
    }
    setbuf(stdin,NULL);
    setbuf(stdout,NULL);
    setbuf(stdin,NULL);

}

int main(){
    puts("教学计划编制问题");
    puts("----------------------");
    puts("CopyRight SincereXIA");
    puts("张俊华 16030199025");
    puts("----------------------");
    puts(">>initializing...");
    ALGraph graph = new ALGraphHead;
    initialize(graph);
    puts(">>initialize Done!");
    system("read -p \"请按任意键继续...\"");
    puts("");

    menu(graph);


    for (int i = 0; i < graph->vexNum; ++i) {
        graph->vertices[i].searched = false;
    }

}    




















四．调试分析

本次上机学习掌握对图的基本操作，并学会了生成拓扑序列，拓扑序列可以由深度优先遍历得到，
这个算法的实现非常简单，但是要理解的话就相对复杂一点。

关键在于为什么在visit方法的最后将该顶点添加到一个集合中，就能保证这个集合就是拓扑排序的结果呢？

因为添加顶点到集合中的时机是在dfs方法即将退出之时，而dfs方法本身是个递归方法，
只要当前顶点还存在边指向其它任何顶点，它就会递归调用dfs方法，而不会退出。
因此，退出dfs方法，意味着当前顶点没有指向其它顶点的边了，即当前顶点是一条路径上的最后一个顶点。
所以边v->w总是由结果集中后出现的顶点指向先出现的顶点。为了让结果更自然一些，
可以使用栈来作为存储最终结果的数据结构，从而能够保证边v->w总是由结果集中先出现的顶点指向后出现的顶点。
因此，之前的深度优先算法可以复用，提高了编码效率













测试结果：
教学计划编制问题
----------------------
CopyRight SincereXIA
张俊华 16030199025
----------------------
>>initializing...
>>检测到教学计划文件：subjectGraph.csv 使用该文件进行配置
>>教学计划成功导入，本次共导入了12个科目，16条依赖规则
>>检测到学分文件：subjectCredit.csv 使用该文件进行配置
>>学分数据导入完毕，共导入12个科目的学分
>>initialize Done!
请按任意键继续...

[options]	function
[v]	查看当前课程信息
[j]	生成可行学习路径
[t]	自定义生成课表
[q]	退出
j
高等数学->普通物理->线性代数->计算机原理->程序设计基础->数值分析->汇编语言->离散数学->数据结构->操作系统->语言的设计与分析->编译原理->[options]	function
[v]	查看当前课程信息
[j]	生成可行学习路径
[t]	自定义生成课表
[q]	退出



t
>>请输入学期总数：
>>4
>>请输入每学期学分上限：
>>20
>>均衡排课？：
>>y
第1学期
编号		课程名		学分
9		高等数学		7
11		普通物理		2
10		线性代数		5
第2学期
编号		课程名		学分
6		计算机原理		3
1		程序设计基础		2
12		数值分析		3
第3学期
编号		课程名		学分
4		汇编语言		3
2		离散数学		3
3		数据结构		4
第4学期
编号		课程名		学分
8		操作系统		4
5		语言的设计与分析		2
7		编译原理		4
请按任意键继续...


