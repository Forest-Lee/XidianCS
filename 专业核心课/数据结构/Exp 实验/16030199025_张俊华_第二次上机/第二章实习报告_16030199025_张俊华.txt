实习报告：2.1 停车场管理
学院：计算机学院                班级：1603019
学号：16030199025				     姓名：张俊华
题目：编制一个按照要求实现停车场管理的系统。
一.需求分析
1. 停车场使用栈结构进行模拟，栈中保存车辆的到达信息（包括车牌号、车辆到达时间），车辆信息入栈表示车辆进入停车场，车辆出栈表示车辆离开停车场。
2. 停车场中有车辆离开时，从栈顶以此弹出车辆信息，直到找到车辆的信息为止，弹出的车辆信息，按照后进先出的原则，使用临时栈保存，找到离开的车辆后，根据时间计算出停车费用，临时栈中的车辆数据重新进入停车场栈。
3. 停车场满时，若仍有车辆进入停车场，则车辆信息使用队列进行保存，有车辆离开停车场时，检测等待队列是否为空，从队列前端取出车辆信息，存入停车场栈
4.测试数据为：
  停车场大小 n = 2，
	输入数据为：(‘A’,1,5), (‘A’,2,10), (‘D’,1,15), (‘A’,3,20), (‘A’,4,25), (‘A’,5,30), (‘D’,2,35), (‘D’,4,40) (‘E’,0,0) 
5. 程序执行的命令为：
1）初始化停车场；2）扫描车辆信息；3）管理信息输出

二.概要设计
1.	为实现上述程序功能，使用线性栈实现停车场
设定栈的抽象数据类型定义：
ADT Stack{
		数据对象：D = { ai|ai ∈ ParkingInformation,i=1,2,…,n,n≥0 }
		数据关系：R1 = {<ai-1,ai> | ai-1,ai ∈ D,i=2,…,n}
		基本操作：
		

//初始化栈S为空
void InitStack(struct StackSq* S, int ms)


//新元素进栈，即把它插入到栈顶
void Push(struct StackSq* S, ElemType x)

//删除栈顶元素并返回值
ElemType Pop(struct StackSq* S)

//读取栈顶元素的值（并不改变栈）
ElemType Peek(struct StackSq* S)

//判断S是否为空。若是空返回1，否则返回0
int EmptyStack(struct StackSq* S)

//清除栈S中的所有元素，释放动态存储空间
void ClearStack(struct StackSq* S)
} ADT Stack

2.	设定等待队列的抽象数据类型为：
ADT WaitingQueue{
		数据对象：D = { ai|ai ∈ ParkingInformation,i=1,2,…,n,n≥0 }
		数据关系：R1 = {<ai-1,ai> | ai-1,ai ∈ D,i=2,…,n}
		基本操作：

	/**
 * 初始化等待队列
 * @param waitingQueue
 */
void InitWaitingQueue(WaitingQueue * &waitingQueue)


/**
 * 出队列
 * @param waitingQueue
 * @return
 */
ElemType DeQueue(WaitingQueue *&waitingQueue)

/**
 * 入队列
 * @param waitingQueue
 * @param carInformation
 * @return
 */
int EnQueue(WaitingQueue *&waitingQueue, ElemType carInformation)

3.	本程序包含以下模块
1）	主程序模块
2）	栈模块――实现抽象栈数据类型
3）	队列模块――实现抽象队列数据类型
4）	停车场栈模块――实现停车场抽象数据类型
5）	等待队列模块――实现等待队列抽象数据类型
三、 详细设计


1. 停车信息类型

typedef struct ParkingInformation{
    char status ;
    int carID = NULL;
    int time;
}ParkingInformation;


2. 栈结构类型

struct StackSq         //定义栈结构类型
{
    ElemType* stack;   //存栈元素的数组指针
    int top;           //存栈顶元素的下标位置
    int MaxSize;       //存stack数组长度
};

//栈满需要重新分配更大空间 的情况
void againMalloc(struct StackSq* S)
{
    ElemType *p = (ElemType *)realloc(S->stack, 2*S->MaxSize*sizeof(ElemType));//此处重新分配的空间为原来的2倍
    if (!p)  //重新分配失败
    {
        printf("存储空间用完！\n");
        exit(1);
    }
    S->stack = p;             //使list指向新栈空间
    S->MaxSize = 2 * S->MaxSize;
    printf("存储空间已扩大为当前的2倍！\n");//输出提示已扩充空间
}

//初始化栈S为空
void InitStack(struct StackSq* S, int ms)
{
    if (ms < 0)
    {
        printf("ms的值非法！\n");
        exit(1);
    }

    S->MaxSize = ms;
    S->stack = (ElemType *)malloc(ms*sizeof(ElemType));
    if (!S->stack)
    {
        printf("动态存储分配失败！\n");
        exit(1);
    }
    S->top = -1;   //值为-1，表示栈空
}

//新元素进栈，即把它插入到栈顶
void Push(struct StackSq* S, ElemType x)
{
    if (S->top == S->MaxSize - 1)
        againMalloc(S);
    S->top++;
    S->stack[S->top] = x;
}

//删除栈顶元素并返回值
ElemType Pop(struct StackSq* S)
{
    if (S->top == -1)
    {
        printf("栈空，无元素出栈！\n");
        exit(1);
    }
    S->top--;
    return S->stack[S->top + 1];
}

//4、读取栈顶元素的值（并不改变栈）
ElemType Peek(struct StackSq* S)
{
    if (S->top == -1)
    {
        printf("栈空，无任何元素！\n");
        exit(1);
    }
    return S->stack[S->top];
}

//判断S是否为空。若是空返回1，否则返回0
int EmptyStack(struct StackSq* S)
{
    if (S->top == -1)
        return 1;
    else
        return 0;
}

//清除栈S中的所有元素，释放动态存储空间
void ClearStack(struct StackSq* S)
{
    if (S->stack)
    {
        free(S->stack);   //释放存储空间
        S->stack = 0;
        S->top == -1;
        S->MaxSize = 0;
    }
}

4.	队列类型
//队列
/**
 * 初始化等待队列
 * @param waitingQueue
 */
void InitWaitingQueue(WaitingQueue * &waitingQueue){
    QNode * qNode = (QNode*)malloc(sizeof(QNode));
    qNode->next = NULL;
    waitingQueue = (WaitingQueue *)malloc(sizeof(WaitingQueue));
    waitingQueue->front = qNode;
    waitingQueue->rear = qNode;
}


/**
 * 出队列
 * @param waitingQueue
 * @return
 */
ElemType DeQueue(WaitingQueue *&waitingQueue){
    if (waitingQueue->rear - waitingQueue->front == 0){
        ParkingInformation parkingInformation;
        parkingInformation.carID = NULL;
        parkingInformation.status = NULL;
        return parkingInformation;
    }
    QNode *q = waitingQueue->front->next;
    ElemType carInformation = q->carInformation;
    waitingQueue->front->next = q->next;
    if (waitingQueue->rear == q)
        waitingQueue->rear = waitingQueue->front;
    free(q);
    return carInformation;
}

/**
 * 入队列
 * @param waitingQueue
 * @param carInformation
 * @return
 */
int EnQueue(WaitingQueue *&waitingQueue, ElemType carInformation){
    QNode *q =(QNode*)malloc(sizeof(QNode));
    q->carInformation =carInformation;
    q->next = NULL;
    waitingQueue->rear->next = q;
    waitingQueue->rear = q;
}

5.	停车场管理算法
/**
 * 车辆进入停车场
 * @param parkingStack
 * @param parkingInformation
 * @return
 */
int ParkingCar(StackSq &parkingStack,ParkingInformation parkingInformation){
    if (parkingStack.top +1  >= parkingStack.MaxSize)
        return 0;
    Push(&parkingStack,parkingInformation);
    printf("车辆进入停车场，车牌号:%d 停车位:%d\n",parkingInformation.carID,parkingStack.top+1);
    printf("时间戳: %d\n\n",parkingInformation.time);
    return 1;
}

/**
 * 车辆离开停车场
 * @param parkingStack
 * @param waitingQueue
 * @param parkingInformation
 * @return
 */
int LeavePark(StackSq &parkingStack,WaitingQueue *&waitingQueue,ParkingInformation parkingInformation){
    if (parkingStack.top == -1)
        return 0;
    ElemType car;
    while ((car = Pop(&parkingStack)).carID!=parkingInformation.carID){
        EnQueue(waitingQueue,car);
    }

    ParkingInformation carInformation;
    while (true){
        carInformation = DeQueue(waitingQueue);
        if (carInformation.carID==NULL)
            break;
        Push(&parkingStack,carInformation);
    }

    printf("车辆离开停车场，车牌号:%d , 费用:%d$\n",parkingInformation.carID,parkingInformation.time-car.time);
    printf("时间戳: %d\n\n",parkingInformation.time);
}


/**
 * 扫描车辆信息
 * @return
 */
ParkingInformation ScanParkingInformation(){

    ParkingInformation parkingInformation;
    printf("等待车辆信息:");
    //scanf("('%c",&parkingInformation.status);
    while (!isalpha(parkingInformation.status=getchar()));
    if (parkingInformation.status == 'Q')
        exit(0);
    scanf("%*[^0-9]%d",&parkingInformation.carID);
    scanf("%*[^0-9]%d",&parkingInformation.time);
    return  parkingInformation;
}


/**
 * 停车场满，等待
 * @param waitingQueue
 * @param parkingInformation
 * @return
 */
int StayWaiting(WaitingQueue *&waitingQueue ,ParkingInformation parkingInformation){
    EnQueue(waitingQueue,parkingInformation);
    printf("车位已满，请等候...\n\n");
}

/**
 * 处理等待队列
 * @param parkingStack
 * @param waitingQueue
 * @return
 */
int DealWaiting(StackSq &parkingStack,WaitingQueue *&waitingQueue){
    ParkingInformation parkingInformation;
    parkingInformation = DeQueue(waitingQueue);
    if (parkingInformation.status!=NULL){
        printf("有等待车辆，准备进入停车场...\n");
        ParkingCar(parkingStack,parkingInformation);
        return 1;
    }
    return 0;
}

int main(){

    StackSq parkingStack;
    WaitingQueue *waitingQueue;
    WaitingQueue *tempWaitingQueue;
    InitStack(&parkingStack,2);
    InitWaitingQueue(waitingQueue);
    InitWaitingQueue(tempWaitingQueue);

    printf("停车场管理系统\n");
    printf("by SincereXIA \n\n\n");
    printf("使用精简指令集模式，向下兼容 \n");
    printf("A 入库  D 出库  Q 退出系统，必选参数：车牌号  时间戳，指令与不同参数使用任意非字母数字字符分隔 \n");

    ParkingInformation parkingInformation;
    while ((parkingInformation = ScanParkingInformation()).status!='Q'){
        switch (parkingInformation.status){
            case 'A':
            case 'a':
                if (parkingStack.top + 1 >= parkingStack.MaxSize)
                    StayWaiting(waitingQueue,parkingInformation);
                ParkingCar(parkingStack,parkingInformation);
                break;
            case 'D':
            case 'd':
                LeavePark(parkingStack,tempWaitingQueue,parkingInformation);
                DealWaiting(parkingStack,waitingQueue);
                break;
        }
    }
}
四．调试分析

1.	本次作业要实现 栈 和 队列 两种数据类型，对基本的数据结构进行了很好的练习
2.	本实习作业采用模块化的设计思路，各模块有相似的接口，内部实现独立，降低了代码开发，调试的复杂度。
3.	本题的核心算法是车辆的入库，等待，和出库问题，通过对真实生活的模拟，解决实际问题。

测试结果：
E:\workspace\cfile\DStry\cmake-build-debug\DStry.exe
停车场管理系统
by SincereXIA 


使用精简指令集模式，向下兼容 
A 入库  D 出库  Q 退出系统，必选参数：车牌号  时间戳，指令与不同参数使用任意非字母数字字符分隔 
等待车辆信息:A 1 5
车辆进入停车场，车牌号:1 停车位:1
时间戳: 5

等待车辆信息:A 2 10
车辆进入停车场，车牌号:2 停车位:2
时间戳: 10

等待车辆信息:D 1 5
车辆离开停车场，车牌号:1 , 费用:0$
时间戳: 5

等待车辆信息:A 3 20
车辆进入停车场，车牌号:3 停车位:2
时间戳: 20

等待车辆信息:A 4 25
车位已满，请等候...

等待车辆信息:A 5 30
车位已满，请等候...

等待车辆信息:D 2 35
车辆离开停车场，车牌号:2 , 费用:25$
时间戳: 35

有等待车辆，准备进入停车场...
车辆进入停车场，车牌号:4 停车位:2
时间戳: 25

等待车辆信息:D 4 40
车辆离开停车场，车牌号:4 , 费用:15$
时间戳: 40

有等待车辆，准备进入停车场...
车辆进入停车场，车牌号:5 停车位:2
时间戳: 30
  
七．附录
源程序文件名清单
约瑟夫环.c





