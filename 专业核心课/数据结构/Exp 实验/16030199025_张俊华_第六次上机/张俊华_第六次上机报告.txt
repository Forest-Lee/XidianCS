







实习报告：6.7 多关键字排序
学院：计算机学院                班级：1603019
学号：16030199025				     姓名：张俊华
题目：按用户提出的单科分数的次序要求排出考生录取的次序














一.需求分析
1. 初始化：从文件读入姓名和分数信息
2. 存储结构建立：将读取的信息存储入数组
3. 多关键字排序：程序的核心功能，实现排序算法
4. 输出排序结果

5. 测试数据为：

学号,姓名,计算机导论与程序设计基础,离散数学（Ⅰ）,高等数学A(I),大学物理（Ⅰ）,思想道德修养与法律基础,大学英语(I)
16030199001,周泽宇,75,79,93,88,87,82
16030199002,李孟桐,98,79,82,81,71,85
16030199003,李欢,61,80,76,64,70,84
16030199004,乔壮,93,81,94,95,76,68
16030199005,高宇,85,67,93,85,72,85
16030199006,魏博文,73,67,69,87,67,72
16030199007,何小玲,77,80,96,82,83,78
16030199008,刘宜,47,71,95,88,83,71
16030199009,任仕杰,96,87,89,91,72,81
16030199010,刘子鹏,74,63,90,93,84,85
16030199011,于鑫越,66,60,74,78,73,85
16030199012,徐泽铭,90,83,94,95,82,80
16030199013,曹宁,82,88,87,81,84,79
16030199014,李国安,94,91,91,97,85,85
16030199015,张浩,96,85,88,95,76,70
16030199016,池昕阳,60,42,75,61,73,74
16030199017,张翔南,90,43,66,77,70,85
16030199018,梁豪杰,93,80,89,89,82,79
16030199019,赵祺文,96,91,92,90,83,85
16030199020,刘泉秀,78,91,97,82,85,71
16030199021,朱向东,97,83,84,93,83,85
16030199022,韩翔宇,72,35,63,61,89,62
16030199023,丁亚玮,91,79,95,99,78,77
16030199024,卢修文,97,74,94,100,73,74
16030199025,张俊华,100,82,97,82,94,85
16030199026,李金鑫,99,62,87,85,74,75
16030199027,李天浩,100,69,80,90,88,85
16030199028,宁寰,89,77,82,82,84,83
16030199029,宋泽辉,23,62,78,80,79,69
16030199030,王滋涵,97,61,67,74,68,66



程序执行的命令为：
1）初始化                
2）按照用户要求进行多关键字排序
3）输出排序结果


二.概要设计
1.	为实现上述程序功能，设计多关键字排序算法
void multSort(bool isRadix){

    cout<<"当前科目关键字"<<endl;
    for (int k = 0; k < SUBJECT_NUM; ++k) {
        printf("%d:\t%s\n",k,subjectName[k].c_str());
    }
    printf("\n\n");
    cout<<"请输入多个关键字序号（权重依次降低）：";
    char line[100];
    int keys[MAX_NUM_OF_GRADES];
    int i = 0;
    int l = 0;
    char c;
    while((c = getchar()) != '\n' && c != EOF);
    gets(line);
    while (sscanf(&line[l],"%d",&keys[i++])){
        while (line[l]!=' '){
            l++;
        }
        if(!line[++l]) break;
    }

    LARGE_INTEGER  num;
    long long start,end,freq;
    QueryPerformanceFrequency(&num);
    freq=num.QuadPart;
    QueryPerformanceCounter(&num);
    start= num.QuadPart;
    for (int j = i-1 ; j >= 0 ; --j) {
        if (isRadix){
            radixSort(keys[j],1,30);
        } else{
            sort(keys[j],1,30);
        }
    }

    QueryPerformanceCounter(&num);
    end= num.QuadPart;
    printf("time=%lld\n",(end-start)*1000/freq);
}

2. 稳定的排序算法使用基数排序实现
void radixSort(int key,int start,int end){
    queue<studentsInfo> infoQueue[100];
    for (int i = 1; i <= STUDENTS_NUM; ++i) {
        infoQueue[studentsInfos[i].grades[key]].push(studentsInfos[i]);
    }
    int i = 1;
    for (int j = 100; j >= 0; --j) {
        while (!infoQueue[j].empty()){
            studentsInfos[i++] = infoQueue[j].front();
            infoQueue[j].pop();
        }
    }
}


3.	本程序包含以下模块
1）	主程序模块
2）	基数排序模块
3） 多关键字排序模块
4）	功能模块――拓展功能

 
















四．调试分析

本次上机学习掌握对多关键字排序的算法设计，并学会了基数排序的思想

它不需要直接对元素进行相互比较,也不需要将元素相互交换,你需要做的就是对元素进行“分类”。
这也是基数排序的魅力所在。在实际项目中，如果对效率有所要求，而不太关心空间的使用时，会选择用基数排序



多关键字排序
----------------------
CopyRight SincereXIA
张俊华 16030199025
----------------------
>>initializing...
>>成绩信息导入完成！
>>共导入30位同学信息, 有效科目共5个
>>initialize Done!
Done Done Don!!!!!!

Spend time:0.016000 sec

请按任意键继续...

[options]	function
[v]	查看当前排名
[j]	多关键字排名
[o]	初始化
[q]	退出
j
使用基数排序？（y/n):y
当前科目关键字
0:	计算机导论与程序设计基础
1:	离散数学（Ⅰ）
2:	高等数学A(I)
3:	大学物理（Ⅰ）
4:	思想道德修养与法律基础
5:	大学英语(I)


请输入多个关键字序号（权重依次降低）：0 3 2
time=0
排名	姓名	学号	计算机导论与程序设计基础	离散数学（Ⅰ）	高等数学A(I)	大学物理（Ⅰ）	思想道德修养与法律基础	大学英语(I)	
1	李天浩	16030199027				100					69					80					90					88					85					
2	张俊华	16030199025				100					82					97					82					94					85					
3	李金鑫	16030199026				99					62					87					85					74					75					
4	李孟桐	16030199002				98					79					82					81					71					85					
5	卢修文	16030199024				97					74					94					100					73					74					
6	朱向东	16030199021				97					83					84					93					83					85					
7	王滋涵	16030199030				97					61					67					74					68					66			